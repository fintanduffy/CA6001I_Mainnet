const { expectEvent } = require('@openzeppelin/test-helpers');

var ThankYouToken = artifacts.require("./ThankYouToken.sol");

contract('ThankYouToken', function(accounts) {
  
  beforeEach(async function() {
    this.a = await ThankYouToken.new();
  });

  it('does stuff', async function() {
     const receipt = await this.a.transfer.call(accounts[1], 1000);

     await expectEvent.inLogs(receipt.logs, 'DidTransferStuff', { message: "Transfer Log" });
     await expectEvent.inTransaction(receipt.tx, ThankYouToken, 'DidMoreTransferStuff', { message: "Transfer Tx" });
  });
  /*
  var tokenInstance;

  it('initializes the contract with the correct values', function() {
    return ThankYouToken.deployed().then(function(instance) {
      tokenInstance = instance;
      return tokenInstance.name();
    }).then(function(name) {
      assert.equal(name, 'ThankYou', 'has the correct name');
      return tokenInstance.symbol();
    }).then(function(symbol) {
      assert.equal(symbol, 'THKU', 'has the correct symbol');
    });
  })

  it('allocates the initial supply upon deployment', function() {
    return ThankYouToken.deployed().then(function(instance) {
      tokenInstance = instance;
      return tokenInstance.totalSupply();
    }).then(function(totalSupply) {
      assert.equal(totalSupply.toNumber(), 12000, 'sets the total supply to 12,000');
      return tokenInstance.balanceOf(accounts[0]);
    }).then(function(adminBalance) {
      assert.equal(adminBalance.toNumber(), 12000, 'it allocates the initial supply to the admin account');
    });
  });

  it('transfers token ownership', function() {
    return ThankYouToken.deployed().then(function(instance) {
      tokenInstance = instance;
      // Test 'require' statement first by transferring something larger than the sender's balance
      return tokenInstance.transfer.call(accounts[1], 99999999999999999999999);
    }).then(assert.fail).catch(function(error) {
      assert(error.message.indexOf('revert') >= 0, 'error message must contain revert');
      return tokenInstance.transfer.call(accounts[1], 1000, { from: accounts[0] });
    }).then(function(success) {
      assert.equal(success, true, 'it returns true');
      return tokenInstance.transfer(accounts[1], 13000, { from: accounts[0] });
    }).then(function(receipt) {
      assert.equal(receipt.logs.length, 1, 'triggers one event');
      assert.equal(receipt.logs[0].event, 'Transfer', 'should be the "Transfer" event');
      assert.equal(receipt.logs[0].args._from, accounts[0], 'logs the account the tokens are transferred from');
      assert.equal(receipt.logs[0].args._to, accounts[1], 'logs the account the tokens are transferred to');
      assert.equal(receipt.logs[0].args._value, 13000, 'logs the transfer amount');
      return tokenInstance.balanceOf(accounts[1]);
    }).then(function(balance) {
      assert.equal(balance.toNumber(), 1000, 'adds the amount to the receiving account');
      return tokenInstance.balanceOf(accounts[0]);
    }).then(function(balance) {
      assert.equal(balance.toNumber(), 2000, 'deducts the amount from the sending account');
    });
  });
*/

});
